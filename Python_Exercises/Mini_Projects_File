# 🐍 **Mini Python Project Pack**

## **1. Number Guessing Game 2.0**

🎯 **Goal:**
Build a game where the computer picks a random number (1–100), and the user guesses it in as few tries as possible.

🧩 **Skills Practiced:**
Loops (`while`), `if/elif/else`, random numbers, user input.

🪜 **Suggested Steps:**

1. Import the `random` module and pick a random number.
2. Use a `while` loop to keep asking for guesses.
3. Give feedback (“Too high” / “Too low”).
4. Count guesses and stop when correct.

🚀 **Stretch Challenges:**

* Limit the number of guesses (like “lives”).
* Add difficulty levels (easy = 10 lives, hard = 5).
* Track best score and save to a file.

---

## **2. Word Scramble Game**

🎯 **Goal:**
Unscramble random words and earn points for correct answers.

🧩 **Skills Practiced:**
Lists, strings, loops, `random.shuffle()`.

🪜 **Suggested Steps:**

1. Store words in a list.
2. Pick one randomly and scramble its letters.
3. Show the scrambled word and ask the player to guess.
4. Track the score.

🚀 **Stretch Challenges:**

* Add a timer or limit guesses.
* Save words in an external `.txt` file.
* Add word categories (animals, food, etc.).

---

## **3. Pizza Order Builder**

🎯 **Goal:**
Let users build a custom pizza, choose toppings, and calculate the total cost.

🧩 **Skills Practiced:**
Dictionaries, loops, conditionals, math.

🪜 **Suggested Steps:**

1. Store toppings and prices in a dictionary.
2. Let the user select multiple toppings.
3. Calculate and print the total bill.
4. Offer to place another order.

🚀 **Stretch Challenges:**

* Add delivery vs pickup cost difference.
* Include a combo discount.
* Format the receipt neatly.

---

## **4. Text Adventure (Mini RPG)**

🎯 **Goal:**
Create a text-based world with rooms and monsters.

🧩 **Skills Practiced:**
Dictionaries, loops, conditionals, random.

🪜 **Suggested Steps:**

1. Create rooms as dictionary entries (`"Forest": {"north": "Cave"}`).
2. Let the player move between rooms.
3. Randomly encounter “monsters” and fight or flee.
4. Track HP and items.

🚀 **Stretch Challenges:**

* Save player progress to a file.
* Add weapons, healing potions, and leveling up.
* Use ASCII art for visuals.

---

## **5. To-Do List CLI App**

🎯 **Goal:**
A simple console app to manage a list of tasks.

🧩 **Skills Practiced:**
Lists, loops, file handling (optional), menus.

🪜 **Suggested Steps:**

1. Show a menu: add task, view tasks, delete task.
2. Store tasks in a list.
3. Use a loop to keep showing the menu.
4. Optionally save to a file.

🚀 **Stretch Challenges:**

* Add due dates or priorities.
* Save/load tasks from a `.json` file.
* Display completed vs pending tasks.

---

## **6. Rock, Paper, Scissors – Tournament**

🎯 **Goal:**
Play a multi-round Rock, Paper, Scissors game against the computer.

🧩 **Skills Practiced:**
Random, loops, conditionals, scoring.

🪜 **Suggested Steps:**

1. Use a loop for rounds.
2. Take player input and generate a computer choice.
3. Compare and score each round.
4. Show the final winner.

🚀 **Stretch Challenges:**

* Add Lizard and Spock for extra variety.
* Create a “best of 5” mode.
* Show match history.

---

## **7. Budget Tracker**

🎯 **Goal:**
Track income and expenses and display a summary.

🧩 **Skills Practiced:**
Lists, dictionaries, loops, input validation.

🪜 **Suggested Steps:**

1. Create lists or dictionaries for transactions.
2. Let the user add income/expense entries.
3. Show balance and total spent/saved.

🚀 **Stretch Challenges:**

* Save data to a CSV file.
* Add spending categories.
* Plot results with `matplotlib` (optional).

---

## **8. Hangman Game**

🎯 **Goal:**
Classic hangman game where the player guesses letters before running out of attempts.

🧩 **Skills Practiced:**
Strings, loops, conditionals, sets.

🪜 **Suggested Steps:**

1. Choose a secret word.
2. Display blanks for each letter.
3. Loop until word guessed or lives run out.
4. Reveal correct guesses progressively.

🚀 **Stretch Challenges:**

* Add ASCII art for the gallows.
* Pick random words from a file.
* Save win/loss history.

---

## **9. Password Strength Checker**

🎯 **Goal:**
Ask for a password and rate its strength.

🧩 **Skills Practiced:**
Strings, loops, sets, conditionals.

🪜 **Suggested Steps:**

1. Get password input.
2. Check for lowercase, uppercase, digits, special chars.
3. Give a “Weak/Medium/Strong” rating.

🚀 **Stretch Challenges:**

* Add color-coded output using ANSI codes.
* Suggest ways to improve weak passwords.

---

## **10. Treasure Hunt (2D Grid Game)**

🎯 **Goal:**
Player moves around a grid looking for hidden treasure.

🧩 **Skills Practiced:**
Nested lists, loops, conditionals, coordinates.

🪜 **Suggested Steps:**

1. Create a 5×5 grid.
2. Randomly place treasure and traps.
3. Let user move with N/S/E/W commands.
4. Give hints (“warmer” or “colder”).

🚀 **Stretch Challenges:**

* Add a mini-map that updates.
* Include random events like “storm” or “find clue.”

---

## 🧾 **How it works**

* Select mini project **you like**.
* If there is something you want to do that is not on the list, ask. 
* **plan first**.
* Add **comments** where needed.
* **Be creative** (themes, emojis, ASCII art).
* **Have Fun!**

---
